<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.haku_app">
    <!-- io.flutter.app.FlutterApplication is an android.app.Application that
         calls FlutterMain.startInitialization(this); in its onCreate method.
         In most cases you can leave this as-is, but you if you want to provide
         additional functionality it is fine to subclass or reimplement
         FlutterApplication and put your custom class here. -->



    <!-- 允许程序访问摄像头进行拍照 -->
    <uses-permission android:name="android.permission.CAMERA" />
    <!-- 允许程序访问网络连接，可能产生GPRS流量 -->
    <uses-permission android:name="android.permission.INTERNET" />
    <!-- 外部存储空间读写权限 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <!-- 允许一个应用程序来管理文档的访问，通常是一个文档选择器部分 -->
    <uses-permission android:name="android.permission.MANAGE_DOCUMENTS" />
    <!-- 指纹识别权限 -->
    <uses-permission android:name="android.permission.USE_FINGERPRINT" />

    <!-- 允许程序录制声音通过手机或耳机的麦克风 -->
    <!-- <uses-permission android:name="android.permission.RECORD_AUDIO" /> -->
    <!-- 允许程序进行发现和配对新的蓝牙设备 -->
    <!-- <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" /> -->
    <!-- 允许程序连接配对过的蓝牙设备 -->
    <!-- <uses-permission android:name="android.permission.BLUETOOTH" /> -->
    <!-- 允许程序获取网络信息状态，如当前的网络连接是否有效 -->
    <!-- <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /> -->
    <!-- 允许程序获取当前WiFi接入的状态以及WLAN热点的信息 -->
    <!-- <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /> -->
    <!-- 允许程序访问电话状态 -->
    <!-- <uses-permission android:name="android.permission.READ_PHONE_STATE" /> -->

    <application
        android:name="io.flutter.app.FlutterApplication"
        android:label="haku_app"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <!-- Displays an Android View that continues showing the launch screen
                 Drawable until Flutter paints its first frame, then this splash
                 screen fades out. A splash screen is useful to avoid any visual
                 gap between the end of Android's launch screen and the painting of
                 Flutter's first frame. -->
            <meta-data
              android:name="io.flutter.embedding.android.SplashScreenDrawable"
              android:resource="@drawable/launch_background"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data android:name="flutterEmbedding" android:value="2" />
    </application>
</manifest>
